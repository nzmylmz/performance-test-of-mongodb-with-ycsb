
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.MongoClient;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author hopeful
 */
public class performanceTestOfMongoDB extends javax.swing.JFrame {

    /**
     * Creates new form performanceTestOfMongoDB
     */
    public performanceTestOfMongoDB() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLoadData = new javax.swing.JButton();
        btnWorkloadC = new javax.swing.JButton();
        btnWorklaodA = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnWorkloadB = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        btnReset = new javax.swing.JButton();
        btnWorkloadD = new javax.swing.JButton();
        cmbKayitSayisi = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        txtKoleksiyonAdi = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        setSize(new java.awt.Dimension(1000, 505));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btnLoadData.setText("Load The Data");
        btnLoadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadDataActionPerformed(evt);
            }
        });

        btnWorkloadC.setText("Workload - C (%100 Read)");
        btnWorkloadC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWorkloadCActionPerformed(evt);
            }
        });

        btnWorklaodA.setText("Workload - A (%50 Read - %50 Update)");
        btnWorklaodA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWorklaodAActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(102, 204, 255));
        jPanel1.setLayout(new java.awt.BorderLayout());

        btnWorkloadB.setText("Workload - B (%95 Read - %5 Update)");
        btnWorkloadB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWorkloadBActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(102, 204, 0));
        jPanel2.setLayout(new java.awt.BorderLayout());

        btnReset.setText("RESET");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnWorkloadD.setText("Workload - D (%95 Read - %5 Insert)");
        btnWorkloadD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWorkloadDActionPerformed(evt);
            }
        });

        cmbKayitSayisi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "100", "1000", "10000", "100000", "1000000" }));

        jLabel1.setText("Kayıt Sayısı");

        txtKoleksiyonAdi.setText("usertable");

        jLabel2.setText("Koleksiyon Adı");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1)
                        .addComponent(btnWorklaodA, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addComponent(btnWorkloadB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnWorkloadC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnWorkloadD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLoadData, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbKayitSayisi, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(txtKoleksiyonAdi, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btnLoadData)
                        .addGap(18, 18, 18)
                        .addComponent(btnWorklaodA)
                        .addGap(18, 18, 18)
                        .addComponent(btnWorkloadB)
                        .addGap(18, 18, 18)
                        .addComponent(btnWorkloadC)
                        .addGap(18, 18, 18)
                        .addComponent(btnWorkloadD)
                        .addGap(144, 144, 144)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbKayitSayisi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtKoleksiyonAdi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnReset))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 19, Short.MAX_VALUE))
            .addComponent(jSeparator1)
        );

        setSize(new java.awt.Dimension(1001, 673));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    DefaultCategoryDataset barChartData = new DefaultCategoryDataset();
    DefaultCategoryDataset barChartAdet = new DefaultCategoryDataset();
    double totalSure, islemRead, islemUpdate, avarageReadSure, avarageUpdateSure = 0.0;

    void ycsb(String workload, String islem, String mesaj, String tur, String dosyaAdi) throws InterruptedException {

        try {
            Runtime rt = Runtime.getRuntime();
            String ops;
            if(islem.equals("load"))
                ops="recordcount";
            else
                ops = "operationcount";
            Process proc = rt.exec("..\\ycsbMongoDB\\bin\\ycsb.bat " + islem + " mongodb -P "
                    + "..\\ycsbMongoDB\\workloads\\" + workload + " -p table=" + txtKoleksiyonAdi.getText() + " -p insertorder=ordered -p "
                    + ops + "=" + cmbKayitSayisi.getSelectedItem().toString() + " "
                    + "-p measurementtype=histogram -p histogram.buckets=0 > "
                    + "..\\ycsbMongoDB\\mongodb\\" + dosyaAdi);
            proc.waitFor();
            JOptionPane.showMessageDialog(null, mesaj, tur, JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(performanceTestOfMongoDB.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void barGrafik() {

        JFreeChart barChart = ChartFactory.createBarChart("PERFORMANS TESTİ(Süre)", "İşlem Türü", "İşlem Süresi (ms)",
                barChartData, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
        CategoryPlot barchrt = barChart.getCategoryPlot();
        barchrt.setRangeGridlinePaint(Color.ORANGE);
        ChartPanel barPanel = new ChartPanel(barChart);
        jPanel1.removeAll();
        jPanel1.add(barPanel, BorderLayout.CENTER);
        jPanel1.validate();
    }

    void barLatencyGrafik() {

        JFreeChart barLatencyChart = ChartFactory.createBarChart("PERFORMANS TESTİ(Sayı)", "İşlem Türü", "İşlem Sayısı (Adet)",
                barChartAdet, PlotOrientation.HORIZONTAL, rootPaneCheckingEnabled, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
        CategoryPlot barLatencychrt = barLatencyChart.getCategoryPlot();
        barLatencychrt.setRangeGridlinePaint(Color.ORANGE);
        ChartPanel barPanel = new ChartPanel(barLatencyChart);
        jPanel2.removeAll();
        jPanel2.add(barPanel, BorderLayout.CENTER);
        jPanel2.validate();
    }


    private void btnLoadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadDataActionPerformed
        // TODO add your handling code here:
        try {
            ycsb("workloada", "load", "Veriler yüklendi", "INFORMATION","insert.txt");
            dosyaOku("insert.txt");
            barChartData.setValue(totalSure, "Insert", "Insert(%100)");
            barGrafik();
            barChartAdet.setValue(islemRead, "Insert", "%100Insert");
            System.out.println("Kayıt Sayısı :" + islemRead);
            barLatencyGrafik();
        } catch (InterruptedException | FileNotFoundException ex) {
            System.out.println(ex.toString());
        }
        
    }//GEN-LAST:event_btnLoadDataActionPerformed

    private void btnWorkloadCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWorkloadCActionPerformed

        try {
            ycsb("workloadc", "run", "Workload-C %100 okuma işlemi gerçekleştirildi", "INFORMATION","WorkloadC.txt");
            dosyaOku("workloadC.txt");

            barChartData.setValue(totalSure, "WorkloadC\n%100-Read", "Read(%100)");
            barGrafik();
            barChartAdet.setValue(islemRead, "WorkloadC\n%100-Read", "Read(%100)");
            barLatencyGrafik();
        } catch (IOException|InterruptedException ex) {
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_btnWorkloadCActionPerformed

    private void btnWorklaodAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWorklaodAActionPerformed
        // TODO add your handling code here:
        try {
            ycsb("workloada", "run", "Workload-A (%50 Read - %50 Update) performans testi gerçekleştirildi", "INFORMATION","WorkloadA.txt");
            dosyaOku("workloadA.txt");

            barChartData.setValue(totalSure, "WorkloadA\n%50-Read\n%50-Update", "WorkloadA");
            barGrafik();
            barChartAdet.setValue(islemRead, "WorkloadA\n%50-Read\n%50-Update", "%50Read");
            barLatencyGrafik();
            barChartAdet.setValue(islemUpdate, "WorkloadA\n%50-Read\n%50-Update", "%50Update");
            barLatencyGrafik();
        } catch (FileNotFoundException | InterruptedException ex) {
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_btnWorklaodAActionPerformed

    private void btnWorkloadBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWorkloadBActionPerformed
        // TODO add your handling code here:
        try {
            ycsb("workloadb", "run", "WorkloadB (%95 Read - %5 Update) performans testi gerçekleştirildi", "INFORMATION","WorkloadB.txt");
            dosyaOku("workloadB.txt");

            barChartData.setValue(totalSure, "WorkloadB\n%95-Read\n%5-Update", "WorkloadB");
            barGrafik();
            barChartAdet.setValue(islemRead, "WorkloadB\n%95-Read\n%5-Update", "%95Read");
            barLatencyGrafik();
            barChartAdet.setValue(islemUpdate, "WorkloadB\n%95-Read\n%5-Update", "%5Update");
            barLatencyGrafik();
        } catch (HeadlessException | IOException | InterruptedException ex) {
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_btnWorkloadBActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentResized

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:        
        barGrafik();
        barLatencyGrafik();
        this.setTitle("IoT Verileri ile MongoDB Performans Testi");
    }//GEN-LAST:event_formWindowOpened

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        try {
            graphSil();
            dosyaSil("insert.txt");
            dosyaSil("workloadA.txt");
            dosyaSil("workloadB.txt");
            dosyaSil("workloadC.txt");
            dosyaSil("workloadD.txt");
            JOptionPane.showMessageDialog(null, "Workload-A-B-C-D.txt dosyaları ve Koleksiyon "+txtKoleksiyonAdi.getText()+" silindi", "Information", JOptionPane.INFORMATION_MESSAGE);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(performanceTestOfMongoDB.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnWorkloadDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWorkloadDActionPerformed
        try {
            ycsb("worklaodd", "run", "WorkloadD (%95 Read - %5 Insert) performans testi gerçekleştirildi", "INFORMATION","WorkloadD.txt");
            dosyaOku("workloadD.txt");

            barChartData.setValue(totalSure, "WorkloadD\n%95-Read\n%5-Insert", "WorkloadD");
            barGrafik();
            barChartAdet.setValue(islemRead, "WorkloadD\n%95-Read\n%5-Insert", "%95Read");
            barLatencyGrafik();
            barChartAdet.setValue(islemUpdate, "WorkloadD\n%95-Read\n%5-Insert", "%5Insert");
            barLatencyGrafik();
        } catch (HeadlessException | IOException | InterruptedException ex) {
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_btnWorkloadDActionPerformed
    void vtSil() {
        try {
            MongoClient mongoClient = new MongoClient("127.0.0.1", 27017);
            DB db = mongoClient.getDB("ycsb");
            //if (db.collectionExists("usertable"))//"javaDoc not found",bu yüzden bu kısım denetlenmeden --try catch-- ile kullanıldı.
            DBCollection myCollection = db.getCollection(txtKoleksiyonAdi.getText());
            myCollection.drop();
        } catch (UnknownHostException ex) {
            Logger.getLogger(performanceTestOfMongoDB.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex.toString());
        }
    }

    void graphSil() {
        try {
            vtSil();
            barChartData = new DefaultCategoryDataset();
            barChartAdet = new DefaultCategoryDataset();
            barGrafik();
            barLatencyGrafik();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString(), "ERROR0", JOptionPane.ERROR_MESSAGE);//hata msj'ı için messagebox
        }
    }

    void dosyaSil(String dosyaAdi) throws FileNotFoundException {
        File file;
        file = new File("..\\ycsbMongoDB\\mongodb\\" + dosyaAdi);
        file.delete();
    }

    void dosyaOku(String dosyaAdi) throws FileNotFoundException {
        try {
            File file = new File("..\\ycsbMongoDB\\mongodb\\" + dosyaAdi);
            Scanner input = new Scanner(file);
            String word = "";
            while (input.hasNext()) {
                word = input.next();/*
                if(word.equals("RunTime(ms),")&&(dosyaAdi.equals("insert.txt"))){
                   totalSure=Double.parseDouble(input.next());
                    System.out.println("insert %100");
                }else
                if(word.equals("RunTime(ms),")&&(dosyaAdi.equals("read.txt"))){
                   totalSure=Double.parseDouble(input.next());
                   System.out.println("Read %100");
                }else
                if(word.equals("RunTime(ms),")&&(dosyaAdi.equals("workloadA.txt"))){
                   totalSure=Double.parseDouble(input.next());
                   System.out.println("WorkloadA(%50 Read - %50 Update)");
                }*/
                switch (dosyaAdi) {
                    case "insert.txt":
                        if (word.equals("RunTime(ms),")) {
                            totalSure = Double.parseDouble(input.next());
                            System.out.println("insert %100-Süre");
                        }
                        if (word.equals("[INSERT],")) {
                            while (input.hasNext()) {
                                word = input.next();
                                if (word.equals("Operations,")) {
                                    islemRead = Double.parseDouble(input.next());
                                }
                                if (word.equals("[CLEANUP],")) {
                                    break;
                                }
                            }
                        }
                        break;
                    case "workloadA.txt":
                        if (word.equals("RunTime(ms),")) {
                            totalSure = Double.parseDouble(input.next());
                            System.out.println("WorkloadA(%50 Read - %50 Update)");
                        }
                        if (word.equals("[READ],")) {
                            while (input.hasNext()) {
                                word = input.next();
                                if (word.equals("Operations,")) {
                                    islemRead = Double.parseDouble(input.next());
                                }
                                if (word.equals("[CLEANUP],")) {
                                    break;
                                }
                            }
                        }
                        if (word.equals("[UPDATE],")) {
                            while (input.hasNext()) {
                                word = input.next();
                                if (word.equals("Operations,")) {
                                    islemUpdate = Double.parseDouble(input.next());
                                }
                                if (word.equals("[CLEANUP],")) {
                                    break;
                                }
                            }
                        }
                        break;
                    case "workloadB.txt":
                        if (word.equals("RunTime(ms),")) {
                            totalSure = Double.parseDouble(input.next());
                            System.out.println("WorkloadC(%95 Read - %5 Update)");
                        }
                        if (word.equals("[READ],")) {
                            while (input.hasNext()) {
                                word = input.next();
                                if (word.equals("Operations,")) {
                                    islemRead = Double.parseDouble(input.next());
                                }
                                if (word.equals("[CLEANUP],")) {
                                    break;
                                }
                            }
                        }
                        if (word.equals("[UPDATE],")) {
                            while (input.hasNext()) {
                                word = input.next();
                                if (word.equals("Operations,")) {
                                    islemUpdate = Double.parseDouble(input.next());
                                }
                                if (word.equals("[CLEANUP],")) {
                                    break;
                                }
                            }
                        }
                        break;
                    case "workloadC.txt":
                        if (word.equals("RunTime(ms),")) {
                            totalSure = Double.parseDouble(input.next());
                            System.out.println("Read %100-Süre");
                        } else if (word.equals("[READ],")) {
                            while (input.hasNext()) {
                                word = input.next();
                                if (word.equals("Operations,")) {
                                    islemRead = Double.parseDouble(input.next());
                                }
                                if (word.equals("[CLEANUP],")) {
                                    break;
                                }
                            }
                        }
                        break;
                    case "workloadD.txt":
                        if (word.equals("RunTime(ms),")) {
                            totalSure = Double.parseDouble(input.next());
                            System.out.println("WorkloadC(%95 Read - %5 Insert)");
                        }
                        if (word.equals("[READ],")) {
                            while (input.hasNext()) {
                                word = input.next();
                                if (word.equals("Operations,")) {
                                    islemRead = Double.parseDouble(input.next());
                                }
                                if (word.equals("[CLEANUP],")) {
                                    break;
                                }
                            }
                        }
                        if (word.equals("[INSERT],")) {
                            while (input.hasNext()) {
                                word = input.next();
                                if (word.equals("Operations,")) {
                                    islemUpdate = Double.parseDouble(input.next());
                                }
                                if (word.equals("[CLEANUP],")) {
                                    break;
                                }
                            }
                        }
                        break;
                }
            }
            input.close();
        } catch (IOException ex) {
            System.out.println(ex.toString());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(performanceTestOfMongoDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(performanceTestOfMongoDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(performanceTestOfMongoDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(performanceTestOfMongoDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new performanceTestOfMongoDB().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoadData;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnWorklaodA;
    private javax.swing.JButton btnWorkloadB;
    private javax.swing.JButton btnWorkloadC;
    private javax.swing.JButton btnWorkloadD;
    private javax.swing.JComboBox<String> cmbKayitSayisi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtKoleksiyonAdi;
    // End of variables declaration//GEN-END:variables
}
